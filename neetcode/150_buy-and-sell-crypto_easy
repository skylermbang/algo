class Solution {
    /**
     * @param {number} prices
     * @return {number}
     */
    maxProfit(prices) {
      //you iterate from the first date and sell each date in the future check the possible maxium profit
    
        let maximum =[]
      for(let i=0; i< prices.length ; i++){
            for (let j=i+1; j<prices.length ; j++){
                console.log(i,j)
                let profit = -1 * (prices[i]- prices[j])
                //console.log(profit)
                maximum.push(profit)
            }
      }
     
      let answer =Math.max(...maximum)
      if (answer > 0){
        return answer
      }else{
        return 0
      }
    }
}


  */
    maxProfit(prices) {
      //you iterate from the first date and sell each date in the future check the possible maxium profit
        let buy=0
        let sell=1
        let maxProfit=0
        let profit=0
        
        while (sell < prices.length){
            if (prices[buy] < prices[sell]){
                profit= prices[sell] - prices[buy]
                maxProfit= Math.max(maxProfit, profit)
            }else{
                buy=sell
            }  
            sell+=1 
        }
        return maxProfit


// first one is brutal force methode O(n^2)
// second one is sliding window O(n)