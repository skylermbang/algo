/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify nums1 in-place instead.
 */
var merge = function(nums1, m, nums2, n) {
    let answer = [];
    for (let i =0; i < m ; i++){
        answer.push(nums1[i])
    }
    for (let j =0; j < n; j++){
        answer.push(nums2[j])
    }
    
  
    answer.sort((a,b)=> a- b)
     // Copy the sorted elements back into nums1
    for (let i = 0; i < answer.length; i++) {
        nums1[i] = answer[i];
    }

}


//O((m + n) log(m + n))
// O(m+n) is faster but log(m+n) is from the using the sort() 
// maybe using while loop and using pointers to add the items in the first array
